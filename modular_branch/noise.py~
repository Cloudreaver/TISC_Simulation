#!/usr/bin/env python

import numpy as np
import random
from impulse import butter_bandpass_filter
from scipy.signal import resample

def generate_noise(sample_length,upsample,noise_mean, noise_sigma,filter_flag):

    upsample_length = sample_length*upsample

    # Define the noise array
    noise = np.zeros(sample_length)
    if (upsample > 1.0):
        resampled_noise = np.zeros(sample_length)
    
    # Fill array with random gaussian noise
    # May need to switch to using Rayleigh noise
    for i in range(0, sample_length):
        noise[i] = random.gauss(0,noise_sigma)

    if filter_flag:
        noise = butter_bandpass_filter(noise)+noise_mean

    # Resample noise if desired
    if(upsample > 1.0):
        resampled_noise = resample(noise,upsample_length)
        return resampled_noise
    else:
        return noise

if __name__ == '__main__':
    import matplotlib.pyplot as plt
    import numpy as np
    sample_length = 48
    upsample = 32.0
    noise_sigma = 25
    noise_mean = 450
    filter_flag = False

    upsample_length = sample_length*upsample

    noise = np.zeros(upsample_length)

    noise = generate_noise(sample_length,upsample,noise_mean,noise_sigma,filter_flag)
    
    t = np.linspace(0,(1/2800000000.0)*sample_length,upsample_length)

    plt.figure(1)
    plt.clf()
    plt.plot(t,noise,label="Filtered,Resampled Noise")
    plt.show()

    
